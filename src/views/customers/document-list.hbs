<div class="container p-4 d-flex justify-content-between align-items-center">
    <h4 class="text-uppercase m-0" style="font-size:3vh">{{customer.fullname}}</h4>
    <a class="btn btn-danger" href="/logout">Cerrar Sesión</a>
</div>


<div class="navigation">
    <a href="#" class="nav-button" data-target="personal-info">
        <i class="fas fa-user"></i> <!-- Ícono de usuario -->
        <p class="text-muted">Perfil</p>
    </a>
    <a href="#" class="nav-button text-muted" data-target="credit-info">
        <i class="fas fa-credit-card"></i> <!-- Nuevo ícono de tarjeta de crédito -->
        <p class="text-muted">Crédito</p>
    </a>
    <a href="#" class="nav-button text-muted" data-target="document-info">
        <i class="fas fa-file-alt"></i> <!-- Ícono de archivo -->
        <p class="text-muted">Archivos</p>
    </a>
    <a href="#" class="nav-button text-muted" data-target="payment-info">
        <i class="fas fa-dollar-sign"></i> <!-- Ícono de dólar -->
        <p class="text-muted">Pagos</p>
    </a>
</div>


<div class="container main-container col-md-8"
    style="height: 68vh; width: 100%; display:flex; overflow-x:scroll; background-color:white">

    <div class="container section personal-info custom-nav-section" style="height:100%">
        <!-- Información Personal -->
        <div class="col-md-6 mx-auto">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-2">Información Personal</h3>
                </div>
                <div class="card-body">
                    {{#if customer.document}}
                    <p class="mb-1">Documento: {{customer.document}}</p>
                    {{/if}}

                    {{#if customer.phone}}
                    <p class="mb-1">Teléfono: {{customer.phone}}</p>
                    {{/if}}

                    {{#if customer.email}}
                    <p class="mb-1">Correo Electrónico: {{customer.email}}</p>
                    {{/if}}

                </div>
            </div>
        </div>
    </div>

    <div class="container section credit-info custom-nav-section" style="height:100%">
        <!-- Información de Crédito -->
        <div class="col-md-6 mx-auto">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-2">Información de Crédito</h3>
                </div>
                <div class="card-body">
                    <p class="mb-1">Estado:
                        <strong>
                            <span id="estado" class="text-uppercase card-subtitle">{{customer.status}}</span>
                        </strong>
                    </p>

                    {{#if customer.credit_process}}
                    <p class="mb-1">Proceso de crédito: {{customer.credit_process}}</p>
                    {{/if}}

                    {{#if customer.bank_number}}
                    <p class="mb-1">Número de cuenta: {{customer.bank_number}}</p>
                    {{/if}}

                    {{#if customer.credit_amount}}
                    <p class="mb-1">Monto de crédito: {{formatCurrency customer.credit_amount}}</p>
                    {{/if}}

                    {{#if customer.available_balance}}
                    <p class="mb-1">Saldo disponible: {{formatCurrency customer.available_balance}}</p>
                    {{/if}}

                </div>
            </div>
        </div>
    </div>


    <div class="container section document-info custom-nav-section" style="height:100%">
        <h2 class="card-title text-center">Archivos Subidos</h2>
        <div class="card-body mx-auto col-md-8">
            <ul class="list-group">
                {{#each customer.files}}
                <li class="list-group-item">
                    <a class="a-doc" href="https://drive.google.com/file/d/{{id}}/view" target="_blank">
                        {{name}}
                    </a>
                </li>
                {{else}}
                <p>No se han subido archivos</p>
                {{/each}}
            </ul>
        </div>
    </div>

    <div class="container section payment-info custom-nav-section text-center" style="height:100%">
        <h2 class="card-title">Historial de Pagos</h2>
        <div class="col-md-10 mx-auto" style="height:100%;overflow-y:scroll">
            {{> payment-table}}
        </div>
    </div>

</div>


<script>
    function renderStates() {
        var estadoSpan = document.getElementById("estado");
        var estado = estadoSpan.textContent.trim().toLowerCase();

        if (estado === "aprobado") {
            estadoSpan.classList("aprobado");
        } else {
            estadoSpan.classList.add("no-aprobado");
        }
    }

    {{!-- function scrollConfig() {
        const container = document.querySelector(".main-container");
        const sections = document.querySelectorAll(".section.custom-nav-section");
        const navButtons = document.querySelectorAll(".nav-button")
        let currentSectionIndex = 0;
        const indexSections = {
            "personal-info": 0,
            "credit-info": 1, // Añade la nueva sección de crédito
            "document-info": 2,
            "payment-info": 3
        }


        container.addEventListener("wheel", function (event) {

            console.log(event.originalTarget.tagName)
            console.log(event.originalTarget.classList)
            // event.originalTarget.tagName == 'TH'|| event.originalTarget.tagName == 'TD'
            const originalTarget = event.originalTarget
            if (!(originalTarget.tagName == 'H2' || originalTarget.tagName == 'H3' || originalTarget.classList.contains('container'))) {
                // console.log("cancelled")
                return;
            }
            // Detecta el desplazamiento del ratón
            event.preventDefault(); // Evita el desplazamiento predeterminado

            const delta = event.deltaY;

            if (delta > 0 && currentSectionIndex < sections.length - 1) {
                // Desplázate hacia abajo si no estás en la última sección
                currentSectionIndex++;
                // console.log(sections[currentSectionIndex])
            } else if (delta < 0 && currentSectionIndex > 0) {
                // Desplázate hacia arriba si no estás en la primera sección
                currentSectionIndex--;
            }

            // Calcula el valor de desplazamiento necesario
            const targetScrollLeft = currentSectionIndex * container.offsetWidth;

            // Realiza un desplazamiento suave hacia la sección objetivo

            updateNavStates(currentSectionIndex);

            container.scrollTo({
                left: targetScrollLeft,
                behavior: "smooth"
            });
        });

        for (let navButton of navButtons) {
            navButton.addEventListener("click", e => {

                const target = navButton.dataset.target;
                const currentSectionIndex = indexSections[target];
                const targetScrollLeft = currentSectionIndex * container.offsetWidth;
                updateNavStates(currentSectionIndex);
                container.scrollTo({
                    left: targetScrollLeft,
                    behavior: "smooth"
                });
            })
        }

        function updateNavStates(index) {
            for (let navButton of navButtons) {
                navButton.classList.add("text-muted");
            }
            navButtons[index].classList.remove("text-muted")
        }

    } --}}

function scrollConfig() {
    const container = document.querySelector(".main-container");
    const sections = document.querySelectorAll(".section.custom-nav-section");
    const navButtons = document.querySelectorAll(".nav-button");
    const elem = document.querySelectorAll(".btn")[0] // wtf?
    let currentSectionIndex = 0;
    const indexSections = {
        "personal-info": 0,
        "credit-info": 1,
        "document-info": 2,
        "payment-info": 3
    }

    let touchStartX = 0;
    let touchMoveX = 0;

    container.addEventListener("touchstart", (e) => {
        touchStartX = e.touches[0].pageX;
        touchStartY = e.touches[0].pageY;
    });

    container.addEventListener("onFling", e => {
        e.preventDefault();
    })

    container.addEventListener("touchmove", (e) => {
        touchMoveY = e.touches[0].pageY - touchStartY;
        touchMoveX = e.touches[0].pageX - touchStartX;
        // elem.textContent = Math.abs(touchMoveX) + " " + Math.abs(touchMoveY)
        elem.textContent = currentSectionIndex
        
        if(Math.abs(touchMoveY) > Math.abs(touchMoveX)) {
            return;
        } else {
            e.preventDefault();
        }
    });

    container.addEventListener("touchend", () => {
        const deltaX = -touchMoveX;

        if (deltaX > 100 && currentSectionIndex < sections.length - 1) {
            currentSectionIndex++;
        } else if (deltaX < -100 && currentSectionIndex > 0) {
            currentSectionIndex--;
        }

        const targetScrollLeft = currentSectionIndex * container.offsetWidth;
        updateNavStates(currentSectionIndex);

        // elem.textContent = targetScrollLeft

        container.scrollTo({
            left: targetScrollLeft,
            behavior: "smooth"
        });
    });

    container.addEventListener("wheel", (event) => {
        event.preventDefault();


        if (event.deltaY > 0 && currentSectionIndex < sections.length - 1) {
            currentSectionIndex++;
        } else if (event.deltaY < 0 && currentSectionIndex > 0) {
            currentSectionIndex--;
        }

        const targetScrollLeft = currentSectionIndex * container.offsetWidth;
        updateNavStates(currentSectionIndex);
        container.scrollTo({
            left: targetScrollLeft,
            behavior: "smooth"
        });
    });

    for (let navButton of navButtons) {
        navButton.addEventListener("click", (e) => {
            const target = navButton.dataset.target;
            currentSectionIndex = indexSections[target];
            const targetScrollLeft = currentSectionIndex * container.offsetWidth;
            updateNavStates(currentSectionIndex);
            elem.textContent = currentSectionIndex
            container.scrollTo({
                left: targetScrollLeft,
                behavior: "smooth"
            });
        });
    }

    function updateNavStates(index) {
        for (let navButton of navButtons) {
            navButton.classList.add("text-muted");
        }
        navButtons[index].classList.remove("text-muted")
    }
}




    document.addEventListener("DOMContentLoaded", () => {
        renderStates();
        scrollConfig();
    });
</script>